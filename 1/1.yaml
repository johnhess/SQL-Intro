---------
name: Find the most densely populated country on earth
description: Use SQL to explore a database and import its data into python
prerequisites: []
language: python
premium: False
under_construction: True
file_list: ['factbook.db', 'sample.db']
mission_number: 17
imports: |
  # no imports
vars:
  1: |
    # no initial vars

---------

name: What's a database? How do we connect to one in Python?
type: video
video: http://youtu.be/7raHYs803GA

---------

name: Reading SQL data into Python
type: code
initial_vars: 1
left_text: |
  We'll connect to our database using Python. Once we're connected, we'll send
  queries in SQL.

  The most important SQL commands for reading data are the `SELECT` and `FROM`
  keywords.

  The standard syntax to read data is `SELECT col_name, another_col_name FROM
  table_name;`

  We'll read from the "people" table, which looks like this:  
  ```python  
  name   favorite_color 
  ====== ============== 
  Vik    Blue 
  John   Blue 
  Nick   Red 
  Morgan Green  
  ```
initial_display: |
  import sqlite3 # import Python's SQLite3 library
  db_connection = sqlite3.connect('sample.db') # connect to our sample db

  # a simple SQL query to get the name and favorite_color from all rows in the people table
  query = 'SELECT name, favorite_color FROM people;'

  # db_connection.execute(query) returns a cursor which has data and metadata
  cursor = db_connection.execute(query)

  # call the cursor's fetchall method here and print the result
instructions: |
  Call `cursor.fetchall()` to get the rows and columns returned by the query.

  Print the result of the cursor object's `fetchall()` method to see the data we
  got back from our query.

  The data you print will be a list-of-tuples. Each inner tuple represents one
  row from the table and has two elements, one for each column we requested in
  our query.
answer: |
  # get all the data you requested
  query_data = cursor.fetchall()
  print(query_data)
hint: |
  Use `data = cursor.fetchall()` to store the data in a variable. Then print
  `data`.
check_vars: []
check_val: |
  [('John', 'Blue'), ('Vik', 'Blue'), ('Nick', 'Red'), ('Morgan', 'Green')]

---------

name: LIMITing a query to a few results
type: code
initial_vars: 1
left_text: |
  When working with big tables with millions of rows or more, we'll sometimes
  want only get a few rows at a time.

  SQL lets us limit the number of rows returned with the `LIMIT` clause.

  Example: `SELECT col_name, another_col_name FROM table_name LIMIT 100;`
  returns the first 100 values.
initial_display: |
  import sqlite3 # import Python's SQLite3 library
  db_connection = sqlite3.connect('sample.db') # connect to our sample db

  # modify this query to LIMIT it to the first two rows
  query = 'SELECT name, favorite_color FROM people;'

  # db_connection.execute(query) returns a cursor which has data and metadata
  cursor = db_connection.execute(query)
  data = cursor.fetchall()
instructions: |
  `LIMIT` the query on the right so it only returns the first two rows.

  Store the data in the variable `data`.
answer: |
  cursor = db_connection.execute('SELECT name, favorite_color FROM people LIMIT 2;')
  data = cursor.fetchall()
hint: |
  The `LIMIT 2` comes after the `FROM table` but before the semicolon that ends
  a SQL query.
check_vars: ['data']

---------

name: Using * to get all columns in a table
type: code
initial_vars: 1
left_text: |
  Naming every column you want can be a pain, especially if a table has dozens
  of columns. Sometimes, we won't even know what columns a table has.
  Fortunately SQL gives us an easy way to get all columns.

  Instead of providing a comma-separated list of column names, we can use the
  shorthand of `*` to tell SQL to return all columns.

  Example: `SELECT * FROM table_name;` will get all columns in each row from the
  table.
initial_display: |
  import sqlite3 # import Python's SQLite3 library
  db_connection = sqlite3.connect('sample.db') # connect to our sample db

  # Write your query here
  query = ''

  # db_connection.execute(query) returns a cursor which has data and metadata
  cursor = db_connection.execute(query)
  data = cursor.fetchall()
instructions: |
  Write a query on the right to `SELECT` all columns `FROM` the people table.

  Don't name the columns explicitly. Instead, use SQL's shorthand, `*`, to tell
  SQL you want all columns.

  Store the data returned by `cursor.fetchall()` in `data`.
answer: |
  cursor = db_connection.execute('SELECT * FROM people;')
  data = cursor.fetchall()
hint: |
  Your query should follow the pattern `SELECT * FROM table_name;`.
check_vars: ['data']

---------

name: Describing the columns in a table.
type: code
initial_vars: 1
left_text: |
  Time to work with some real data.

  This database, factbook.db, comes from the CIA's World Factbook. It contains a
  single table called regions which has some information about some countries
  and regions of the world.

  First, we'll need to figure out what columns the regions table holds.

  The cursor stores information about the columns we request in its
  `description` attribute.

  On the right, we've already set up a query. Instead of looking at the data it
  returns, let's get a description of that data.
initial_display: |
  import sqlite3 # import Python's SQLite3 library
  db_connection = sqlite3.connect('factbook.db') # connect to our CIA World Factbook db

  # SELECT all data from regions table
  query = 'SELECT * FROM regions;'

  # db_connection.execute(query) returns a cursor which has data and metadata
  cursor = db_connection.execute(query)
instructions: |
  Assign the value of `cursor.description` to the variable `metadata`.

  To see the description we get back from the cursor, print the value of
  `metadata`. We'll talk about what the description contains in it in the next
  step.
answer: |
  # get the description
  metadata = cursor.description
  print(metadata)
hint: |
  `metadata = cursor.description` will store the cursor's metadata in the
  `metadata` variable.
check_vars: ['metadata']

---------

name: Listing all the column names in a table
type: code
initial_vars: 1
left_text: |
  Let's get the columns' names from the metadata we retrieved in the last step

  The description is a list-of-tuples. There's one inner tuple for each column.

  Each column's inner tuple contains 7 elements. The name is the very first one.
initial_display: |
  import sqlite3 # import Python's SQLite3 library
  db_connection = sqlite3.connect('factbook.db') # connect to our CIA World Factbook db

  # get all columns from the first row of the regions table
  query = 'SELECT * FROM regions LIMIT 1;'

  # db_connection.execute(query) returns a cursor which has data and metadata
  cursor = db_connection.execute(query)
  metadata = cursor.description

  # store all column names in a list
  column_names = []
instructions: |
  Put the first item of each inner tuple from `metadata` in the `column_names`
  list.

  You can use a loop or a list comprehension, but at the end, `column_names`
  should be a list of strings.

  Last, go ahead and print `column_names` and read through the pieces of
  information our table contains about each region.
answer: |
  column_names = [col[0] for col in metadata]
  print(column_names)
hint: |
  `column_names` should be a list of 14 strings.
check_vars: ['column_names']

---------

name: Using SQL to COUNT rows in a table
type: code
initial_vars: 1
left_text: |
  Let's use SQL to find out about our regions table. How many regions does it
  describe?

  Instead of pulling in all of the data and then calling `len(data)` in Python,
  we can use SQL to ask the database to count the rows for us.

  To do that, we'll use `COUNT(*)` to see how many rows are in the table.

  Example: `SELECT COUNT(*) FROM table_name;`
initial_display: |
  import sqlite3 # import Python's SQLite3 library
  db_connection = sqlite3.connect('factbook.db') # connect to our CIA World Factbook db

  # write your query here
  query = ''

  # db_connection.execute(query) returns a cursor which has data and metadata
  cursor = db_connection.execute(query)
  data = cursor.fetchall() # a list-of-tuples

  # modify this line to extract the count of rows from data
  number_of_regions = 0

  print("There are", number_of_regions, "regions in our table")
instructions: |
  Write a SQL query to return the count of rows in the regions table. Store that
  query in `query`.

  Then, modify the line starting with `number_of_regions` to store the first
  value of the first inner tuple from `data` in `number_of_regions`.
answer: |
  query = 'SELECT COUNT(*) FROM regions;'
  cursor = db_connection.execute(query)
  data = cursor.fetchall()
  number_of_regions = data[0][0]
  print("There are", number_of_regions, "regions in our table")
hint: |
  `number_of_regions` should be an integer from within `data`.
check_vars: ['data', 'number_of_regions']

---------
